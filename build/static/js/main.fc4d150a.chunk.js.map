{"version":3,"sources":["mock/mockSensors.js","AvatarScene.js","App.js","serviceWorker.js","index.js"],"names":["wait","ms","Promise","resolve","setTimeout","deepClone","obj","JSON","parse","stringify","sensorTime","mockSensors","cb","a","interval","index","i","sensorData","length","response","Time","AvatarScene","boneInfo","boneNum","useState","engine","setEngine","skeleton","setSkeleton","canvasRef","useRef","useEffect","forEach","boneId","q","p","bones","rotationQuaternion","canvas","current","e","Engine","scene","Scene","camera","ArcRotateCamera","Vector3","Zero","setTarget","attachControl","HemisphericLight","intensity","SceneLoader","ImportMesh","avatar","newMeshes","particleSystems","skeletons","runRenderLoop","render","onResizeWindow","resize","window","addEventListener","removeEventListener","width","height","ref","boneName","_","invert","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","BONE_MAP","App","setBoneNum","incrementBone","useCallback","decrementBone","setBoneInfo","Skeletal","b","console","log","bone","QX","QY","QZ","QW","PX","PY","PZ","ID","Quaternion","push","type","onClick","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PACMA,EAAO,SAAAC,GAAE,OAAI,IAAIC,QAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MAE9D,SAASI,EAAUC,GACjB,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,IAInC,IAAII,EAAa,E,SACFC,E,6EAAf,WAA2BC,GAA3B,iCAAAC,EAAA,4DAA+BC,EAA/B,+BAAwC,IAAKC,EAA7C,+BAAqD,EAC7CC,EAAID,EAAQE,EAAWC,OACvBC,EAAWd,EAAUY,EAAWD,IACtCN,GAAcI,EACdK,EAASC,KAAOV,EAJlB,SAKQV,EAAKc,GALb,cAMEF,EAAGO,GANL,UAOQR,EAAYC,EAAIE,EAAUC,EAAQ,GAP1C,2C,sBAUeJ,I,EAAAA,I,wDCsFAU,EA5FK,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAwB,KAAdC,QAEHC,mBAAS,OAFQ,mBAEtCC,EAFsC,KAE9BC,EAF8B,OAGbF,mBAAS,MAHI,mBAGtCG,EAHsC,KAG5BC,EAH4B,OAILJ,mBAAS,MAJJ,mBAKvCK,GALuC,UAK3BC,iBAAO,OAkBzBC,oBAAU,WACFJ,GAAYL,GAEhBA,EAASU,QAAS,YAAsB,IAApBC,EAAmB,EAAnBA,OAAWC,GAAQ,EAAXC,EAAW,EAARD,GAClBP,EAASS,MAAMH,GACrBI,mBAAqBH,KAI7B,CAACP,EAAUL,IAEdS,oBAAU,WACR,IAAIN,EAAJ,CACA,IAAMa,EAAST,EAAUU,QACnBC,EAAI,IAAIC,IAAOH,GAAQ,GAC7BZ,EAAUc,GAEV,IAAME,EAAQ,IAAIC,IAAMH,GAClBI,EAAS,IAAIC,IACjB,SACA,EACA,EACA,IACAC,IAAQC,OACRL,GAGFE,EAAOI,UAAU,IAAIF,IAAQ,EAAG,GAAI,IAEpCF,EAAOK,cAAcX,GAAQ,GAEf,IAAIY,IAAiB,SAAU,IAAIJ,IAAQ,EAAG,EAAG,GAAIJ,GAE7DS,UAAY,GAClBC,IAAYC,WACV,GACA,GAFF,eAGU9C,KAAKE,UAAU6C,IACvBZ,EACA,SAASa,EAAWC,EAAiBC,GAEnC7B,EAAY6B,EAAU,MAG1BjB,EAAEkB,cAAc,WACVhB,GACFA,EAAMiB,WAIV,IAAMC,EAAiB,WACjBnC,GACFA,EAAOoC,UAKX,OADAC,OAAOC,iBAAiB,SAAWH,GAC5B,WACLE,OAAOE,oBAAoB,SAAUJ,MAEtC,CAACnC,IAMJ,OAAO,4CAJM,CACXwC,MAAO,IACPC,OAAQ,KAEH,CAAkBC,IAAKtC,MCnE1BuC,EAAWC,IAAEC,OAvBF,CACfC,EAAG,QACHC,EAAG,SACHC,EAAG,UACHC,EAAG,SACHC,EAAG,UACHC,EAAG,OACHC,EAAG,OACHC,EAAG,SACHC,EAAG,SACHC,EAAG,OACHC,GAAI,aACJC,GAAI,aACJC,GAAI,QACJC,GAAI,QACJC,GAAI,UACJC,GAAI,SACJC,GAAI,UACJC,GAAI,UACJC,GAAI,SACJC,GAAI,YAKAC,GAAQ,mBAEXvB,EAAQ,OAAc,IAFX,cAGXA,EAAQ,QAAe,GAHZ,cAIXA,EAAQ,OAAc,IAJX,cAKXA,EAAQ,QAAe,IALZ,cAWXA,EAAQ,WAAkB,GAXf,cAYXA,EAAQ,WAAkB,IAZf,cAaXA,EAAQ,MAAa,GAbV,cAcXA,EAAQ,MAAa,IAdV,GAgDCwB,MA/Bf,WAAgB,IAAD,EACiBpE,mBAAS,IAD1B,mBACND,EADM,KACGsE,EADH,KAEPC,EAAgBC,sBAAY,kBAAMF,EAAW,SAAAtE,GAAO,OAAIA,EAAU,KAAI,IACtEyE,EAAgBD,sBAAY,kBAAMF,EAAW,SAAAtE,GAAO,OAAIA,EAAU,KAAI,IAH/D,EAImBC,mBAAS,MAJ5B,mBAINF,EAJM,KAII2E,EAJJ,KAqBb,OAhBK3E,GACHX,EAAY,YAAmB,IAAhBuF,EAAe,EAAfA,SACPC,EAAI,GACVC,QAAQC,IAAI,SACZH,EAASlE,QAAQ,SAAAsE,GAAS,IACjBC,EAAmCD,EAAnCC,GAAIC,EAA+BF,EAA/BE,GAAIC,EAA2BH,EAA3BG,GAAIC,EAAuBJ,EAAvBI,GAAIC,EAAmBL,EAAnBK,GAAIC,EAAeN,EAAfM,GAAIC,EAAWP,EAAXO,GAAIC,EAAOR,EAAPQ,GAC7B7E,EAAS0D,EAASmB,GACxB,GAAI7E,EAAQ,CACV,IAAMC,EAAI,IAAI6E,IAAWR,EAAK,IAAOC,EAAK,IAAMC,EAAK,IAAMC,EAAK,KAC1DvE,EAAK,IAAIW,IAAQ6D,EAAK,IAAMC,EAAG,IAAMC,EAAG,KAC9CV,EAAEa,KAAM,CAAE/E,SAAQE,IAAGD,SAGzB+D,EAAYE,KAIZ,6BACA,kBAAC,EAAD,CAAa7E,SAAUA,EAAUC,QAASA,IAC1C,4BAAQ0F,KAAK,SAASC,QAASlB,GAA/B,QACA,8BAAOzE,GACP,4BAAQ0F,KAAK,SAASC,QAASpB,GAA/B,UCpEcqB,QACW,cAA7BrD,OAAOsD,SAASC,UAEe,UAA7BvD,OAAOsD,SAASC,UAEhBvD,OAAOsD,SAASC,SAASC,MACvB,2DCZNC,IAAS5D,OAAO,kBAAC,EAAD,MAAS6D,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.fc4d150a.chunk.js","sourcesContent":["import sensorData from './sampleSensorData';\r\nconst wait = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nfunction deepClone(obj) {\r\n  return JSON.parse(JSON.stringify(obj)); // efficient way to deep clone\r\n}\r\n\r\n\r\nlet sensorTime = 0;\r\nasync function mockSensors(cb, interval=100, index = 0) {\r\n  const i = index % sensorData.length;\r\n  const response = deepClone(sensorData[i]);\r\n  sensorTime += interval;\r\n  response.Time = sensorTime;\r\n  await wait(interval);\r\n  cb(response);\r\n  await mockSensors(cb, interval, index + 1);\r\n}\r\n\r\nexport default mockSensors;\r\n","import React, { useRef, useState, useEffect } from \"react\";\r\nimport { Engine } from \"@babylonjs/core/Engines/engine\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { SceneLoader } from \"@babylonjs/core\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math\";\r\nimport { ArcRotateCamera } from \"@babylonjs/core/Cameras/arcRotateCamera\";\r\nimport { HemisphericLight } from \"@babylonjs/core/Lights/hemisphericLight\";\r\n// import { Mesh } from \"@babylonjs/core/Meshes/mesh\";\r\n\r\n// import avatar from \"./assets/Dude.json\";\r\n// import avatar from \"./assets/AvatarMVI_Female_Rig.json\";\r\n// import avatar from \"./assets/AvatarMVI_Rig.json\";\r\nimport avatar from './assets/AvatarMVI_Female_Rig_TestAnim';\r\nconst AvatarScene = ({ boneInfo, boneNum }) => {\r\n  // const [scene, setScene] = useState(null);\r\n  const [engine, setEngine] = useState(null);\r\n  const [skeleton, setSkeleton] = useState(null);\r\n  const [previousBone, setPreviousBone] = useState(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  // useEffect(() => {\r\n  //   if (skeleton) {\r\n  //     if (previousBone) {\r\n  //       console.log('setting previous back')\r\n  //       previousBone.setScale(new Vector3(1, 1, 1));\r\n  //     }\r\n\r\n  //     let bone = skeleton.bones[boneNum];\r\n  //     if (!bone) {\r\n  //       return;\r\n  //     }\r\n  //     bone.setScale(new Vector3(2, 2, 2));\r\n  //     setPreviousBone(bone);\r\n  //   }\r\n  // }, [skeleton, boneNum, previousBone]);\r\n\r\n  useEffect(() => {\r\n      if (skeleton && boneInfo) {\r\n      // console.log(boneInfo)\r\n      boneInfo.forEach( ({boneId, p, q } )=> {\r\n        let bone = skeleton.bones[boneId];\r\n        bone.rotationQuaternion = q;\r\n        // bone.position = p; \r\n      })\r\n    }\r\n  }, [skeleton, boneInfo]);\r\n\r\n  useEffect(() => {\r\n    if (engine) return; // only do once\r\n    const canvas = canvasRef.current;\r\n    const e = new Engine(canvas, true);\r\n    setEngine(e);\r\n\r\n    const scene = new Scene(e);\r\n    const camera = new ArcRotateCamera(\r\n      \"camera\",\r\n      1,\r\n      1,\r\n      140,\r\n      Vector3.Zero(),\r\n      scene\r\n    );\r\n\r\n    camera.setTarget(new Vector3(0, 40, 0));\r\n\r\n    camera.attachControl(canvas, true);\r\n\r\n    const light = new HemisphericLight(\"light1\", new Vector3(0, 1, 0), scene);\r\n\r\n    light.intensity = 0.7;\r\n    SceneLoader.ImportMesh(\r\n      \"\",\r\n      \"\",\r\n      `data:${JSON.stringify(avatar)}`,\r\n      scene,\r\n      function(newMeshes, particleSystems, skeletons) {\r\n        // mesh = newMeshes[0];\r\n        setSkeleton(skeletons[0]);\r\n      }\r\n    );\r\n    e.runRenderLoop(() => {\r\n      if (scene) {\r\n        scene.render();\r\n      }\r\n    });\r\n\r\n    const onResizeWindow = () => {\r\n      if (engine) {\r\n        engine.resize();\r\n      }\r\n    };\r\n  \r\n    window.addEventListener(\"resize\",  onResizeWindow);\r\n    return () => {\r\n      window.removeEventListener(\"resize\", onResizeWindow);\r\n    };\r\n  }, [engine]);\r\n\r\n  const opts = {\r\n    width: 1000,\r\n    height: 800\r\n  };\r\n  return <canvas {...opts} ref={canvasRef} />;\r\n};\r\n\r\nexport default AvatarScene;\r\n// bone.rotationQuaternion=new Quarternion(x,y,z,w);","import React, { useState, useCallback } from 'react';\r\nimport _ from 'lodash';\r\nimport { Vector3, Quaternion } from \"@babylonjs/core/Maths/math\";\r\n\r\nimport mockSensors from './mock/mockSensors';\r\n\r\nimport './App.css';\r\nimport AvatarScene from './AvatarScene';\r\n\r\n\r\n\r\n// These come from Unreal and correspond to boneType in database\r\nconst boneType = {\r\n  0: 'Spine',\r\n  1: 'Hand_L',\r\n  2: 'Elbow_L',\r\n  3: 'Hand_R',\r\n  4: 'Elbow_R',\r\n  5: 'Hips',\r\n  6: 'Head',\r\n  7: 'Spine2',\r\n  8: 'Spine1',\r\n  9: 'Neck',\r\n  10: 'Shoulder_L',\r\n  11: 'Shoulder_R',\r\n  12: 'Arm_L',\r\n  13: 'Arm_R',\r\n  14: 'Thigh_L',\r\n  15: 'Knee_L',\r\n  16: 'Ankle_L',\r\n  17: 'Thigh_R',\r\n  18: 'Knee_R',\r\n  19: 'Ankle_R',\r\n};\r\n\r\nconst boneName = _.invert(boneType);\r\n\r\nconst BONE_MAP = {\r\n  // [boneName['Spine']] : 2,\r\n  [boneName['Hand_L']] : 10,\r\n  [boneName['Elbow_L']] : 9,\r\n  [boneName['Hand_R']] : 32,\r\n  [boneName['Elbow_R']] : 31,\r\n//hips?\r\n//head?\r\n  // [boneName['Spine2']] : 4,\r\n  // [boneName['Spine1']] : 3,\r\n// neck?  \r\n  [boneName['Shoulder_L']] : 6,\r\n  [boneName['Shoulder_R']] : 29,\r\n  [boneName['Arm_L']] : 8,\r\n  [boneName['Arm_R']] : 30,\r\n};\r\n\r\nfunction App() {\r\n  const [boneNum, setBoneNum] = useState(14);\r\n  const incrementBone = useCallback(() => setBoneNum(boneNum => boneNum + 1), []);\r\n  const decrementBone = useCallback(() => setBoneNum(boneNum => boneNum - 1), []);\r\n  const [boneInfo, setBoneInfo] = useState(null);\r\n  if (!boneInfo) {\r\n    mockSensors(({ Skeletal }) => {\r\n      const b = [];\r\n      console.log('sssss')\r\n      Skeletal.forEach(bone => {\r\n        const {QX, QY, QZ, QW, PX, PY, PZ, ID } = bone;\r\n        const boneId = BONE_MAP[ID];\r\n        if (boneId) {\r\n          const q = new Quaternion(QX / 1000 , QY / 1000, QZ / 1000, QW / 1000);\r\n          const p  = new Vector3(PX / 1000, PY/1000, PZ/1000);\r\n          b.push( { boneId, p, q });\r\n        }\r\n      });\r\n      setBoneInfo(b);\r\n    });\r\n  }\r\n  return (\r\n      <div>\r\n      <AvatarScene boneInfo={boneInfo} boneNum={boneNum}/>\r\n      <button type=\"button\" onClick={decrementBone}>Less</button>\r\n      <span>{boneNum}</span>\r\n      <button type=\"button\" onClick={incrementBone}>More</button>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}